create dataframe_for_reps vocab
create dataframe_for_reps orth_freq_db
create dataframe_for_reps phon_freq_db
vocab load Databases/Vocab_files/drc.op.eNd
orth_freq_db load Databases/Vocab_files/drc.orth.eNd
phon_freq_db load Databases/Vocab_files/drc.phon.eNd

create string_split orth_str
orth_str set_source (vocab column_rep orthography string_representation)
orth_str create_block_keyed letter_rep

create string_representation constraint_rep
create string_split chunk_spl
chunk_spl set_source constraint_rep

create string_representation prechunk
create string_split prechunk_spl
prechunk_spl set_source prechunk




load wtstring_representation wtstring_representation.so
create wtunkey_conversion wunk
wunk set_source (letter_rep element)
wunk set_target (prechunk_spl inner)

create pattern underscore
underscore set (prechunk_spl inner) =

create const_conversion underscore_cc
underscore_cc set underscore
#wunk add_fallback underscore_cc

create flatten_string_conversion flat
flat set_source (orth_str get_target)
flat set_target (vocab column_rep orthography string_representation)

create regex_side_effect_conversion fillin
fillin set_source (prechunk_spl inner) 
fillin set_target (chunk_spl inner)
#fillin add ^$ _ _
#fillin add ^=$ _ _
fillin add ([a-z]) _ \1

create string_representation normal
create string_representation normalw

create flatten_string_conversion nflat
nflat set_source normalw
nflat set_target normal

create regex_side_effect_conversion normalize
normalize set_source (chunk_spl get_target) 
normalize set_target normalw
#normalize add __ ~ #
normalize add ^$ ~ #
normalize add ([^_~])\1 ~ \1
normalize add ([^_~])$ ~ .*\1.*

create string_representation regex
create regex_conversion regexize
regexize set_source normal
regexize set_target regex
regexize add ([a-z])#+([a-z]) \1.+\2
regexize add \*# *
regexize add #\. .  
regexize add \.\*\.\* \.\*
regexize add \.\+\.\* \.\+
regexize add \.\*\.\+ \.\+
regexize add ^#+$ 
regexize add ^#+ .*
regexize add #+$ .*

create parallel_conversion bananas
bananas set_source letter_rep
bananas set_target (orth_str get_target)

create parallel_conversion bananas2
bananas2 set_source letter_rep
bananas2 set_target (prechunk_spl get_target)

#create parallel_conversion bananas3
#bananas3 set_source (prechunk_spl get_target)
#bananas3 set_target (chunk_spl get_target)


create latch_layer what
what represent letter_rep 
what set_lag 0

create latch_layer where
where represent letter_rep 
where set_lag 0

create latch_layer input
input represent letter_rep
input set_lag 0

create fire_layer attention
attention add_facet ltrs_block_attention_weight_transfer
attention represent letter_rep
attention set_lag 0

create connection attend
attend autoconnect input attention


create fire_layer locable
locable represent letter_rep
locable set_lag 0

create connection perception
perception autoconnect attention what

create connection perception2
perception2 autoconnect attention locable

create connection locating
locating autoconnect locable where


create string_layer chunks
chunks represent (chunk_spl get_target)
chunks set_lag 0
chunks add_hint plot_type LTRS_chunk_layer.R
chunks add_hint plot_type LTRS_chunk_layer_2.R

create string_layer constraint
constraint represent regex
constraint set_lag 0

create connection stringer
stringer autoconnect what chunks

xml stringer

create connection stringer2
stringer2 autoconnect where chunks

create connection dechunk
dechunk autoconnect chunks constraint

#create latch_layer checker
#checker represent (vocab column_rep Word)
#checker set_lag 0
#checker add_facet clip_out

create iac_layer orth_lex
orth_lex represent (vocab column_rep orthography)

# ## PHONOLOGICAL LEXICON (LAYER)
create iac_layer phon_lex
phon_lex represent (vocab column_rep phonology)

#OB ## PHONEME LAYER (OUTPUT BUFFER)
create string_split phon_str_conv
phon_str_conv set_blank "
phon_str_conv set_source (vocab column_rep phonology string_representation)
#phon_str_conv set_min 8
phon_str_conv create_block_keyed phon_str_bk

create string_split phon_str_no_blank
phon_str_no_blank set_source (vocab column_rep phonology string_representation)

create equiv_conversion phonstrbl
phonstrbl set_source (phon_str_no_blank get_target)
phonstrbl set_target (phon_str_conv get_target)

create iac_layer phoneme_out
#phoneme_out represent phoneme_chars
phoneme_out represent phon_str_bk

#create bias_layer orth_freq 
#orth_freq represent (orth_freq_db column_rep bias)
create bias_layer phon_freq
phon_freq represent (phon_freq_db column_rep bias)

create grep_connection matcher
matcher set_autoconnect 0
matcher attach constraint
orth_lex attach matcher

create best_above_threshold_observer word_id
word_id target orth_lex
ltrs_drc add word_id

create regex_observer yes_decider
yes_decider target word_id
yes_decider add \?
yes_decider add .+ yes

create reset_nobserver reset
reset add_trigger (input state)
reset add_sync input
#reset add_target attention
reset add_target what
reset add_target where
reset add_target reset
#reset add_target checker 
reset add_target locable

ltrs_drc define_input orthographic (vocab column_rep orthography string_representation) input
ltrs_drc define_output lexical_decision yes_decider
#ltrs_drc define_output lexical_decision no_decider

# ## ORTH-PHON
create connection opc
opc autoconnect orth_lex phon_lex
 
# ## PHON-ORTH
create connection poc
poc autoconnect phon_lex orth_lex

# ## PHON-PHONEME
create connection ppmc
ppmc autoconnect phon_lex phoneme_out

# ## PHONEME-PHON
create connection pmpc
pmpc autoconnect phoneme_out phon_lex

# ## ORTH-ORTH
create connection lato
lato autoconnect orth_lex orth_lex

# ## PHON-PHON
create connection latp
latp autoconnect phon_lex phon_lex

# ## PHONEME-PHONEME
create connection latpm
latpm autoconnect phoneme_out phoneme_out


create equiv_conversion fconv1
fconv1 set_source (vocab column_rep orthography string_representation)
fconv1 set_target (orth_freq_db column_rep orthography string_representation)

create equiv_conversion fconv2
fconv2 set_source (vocab column_rep phonology string_representation)
fconv2 set_target (phon_freq_db column_rep phonology string_representation)


#create connection freqb
#freqb autoconnect orth_freq orth_lex

create connection pfreqb
pfreqb autoconnect phon_freq phon_lex

create serialize_blocks_observer thresholded_best_phonemes
thresholded_best_phonemes inner_type best_above_threshold_observer
thresholded_best_phonemes target phoneme_out


create regex_observer pronouncer
pronouncer target thresholded_best_phonemes
pronouncer add ".* "
pronouncer add .*\?.* 
pronouncer add ^[^"]*$
pronouncer add " 

ltrs_drc define_output pronunciation pronouncer

phon_str_conv set_auto_use 0
(phon_str_conv parallel) set_auto_use 0
create string_representation pregraphemic
create blocked_representation grapheme_reps
create string_representation grapheme_reps_in
grapheme_reps set_element grapheme_reps_in
grapheme_reps number 8

create blocked_representation osgt
create string_representation osgt_inner
osgt set_element osgt_inner
osgt number 8
create flatten_string_conversion dflat
dflat set_source osgt
dflat set_target pregraphemic


load wtstring_representation wtstring_representation.so


#create parallel_conversion osgt_punkey
#osgt_punkey set_source letter_rep
#osgt_punkey set_target osgt
#osgt_punkey set_weight 0.1

create wtkey_conversion psgt_key
psgt_key set_target (phon_str_bk element)
psgt_key set_source (phon_str_no_blank inner)
psgt_key set_weight 0.1

create parallel_conversion psgt_pkey
psgt_pkey set_target phon_str_bk
psgt_pkey set_source (phon_str_no_blank get_target)
psgt_pkey set_weight 0.1

#create wtstring_layer pre_graph 
#pre_graph represent pregraphemic

create wtstring_layer graphemes
graphemes represent grapheme_reps

#create wtstring_layer phon_str
#phon_str represent (phon_str_no_blank get_target)

create strength_layer phonemes
phonemes represent phon_str_bk

create wtregex_side_effect_conversion graphemize
graphemize set_source pregraphemic
graphemize set_target grapheme_reps

create dataframe parse_graphemes_db
parse_graphemes_db load Databases/Vocab_files/RC99_parse_graphemes.eNd
parse_graphemes_db for_each_row graphemize add $search $replace $grapheme

create string_representation amphons

create string_representation flatamphons

create flatten_string_conversion pflat
pflat set_source amphons
pflat set_target flatamphons

create regex_conversion phonotactic
phonotactic set_target (vocab column_rep phonology string_representation)
phonotactic set_source flatamphons

create dataframe phonotactic_db
phonotactic_db load Databases/Vocab_files/DRC_phonotac.eNd
phonotactic_db for_each_row phonotactic add $search $replace

create wtregex_side_effect_conversion gpc
gpc set_target amphons
gpc set_source grapheme_reps

create dataframe grapheme_phoneme_db

grapheme_phoneme_db load Databases/Vocab_files/RC99_grapheme_phoneme.eNd

grapheme_phoneme_db for_each_row gpc add $search $replace $phoneme
create connection graphemizer
graphemizer autoconnect constraint graphemes

create connection gpcer
#gpcer autoconnect graphemes phon_str
gpcer autoconnect graphemes phonemes

#create connection phonbin
#phonbin autoconnect phon_str phonemes


create connection nlpl
nlpl autoconnect phonemes phoneme_out


#create blocked_connection bestlls
#bestlls autoconnect best_letters best_letters_str

#create connection blspg
#blspg autoconnect best_letters_str pre_graph 

graphemes set_lag 0
phonemes set_lag 0


ltrs_drc add thresholded_best_phonemes

(ltrs_drc parameters) load $parameter_file

