# ## WORD LEVEL
create iac_layer words

# Load words and their resting levels
create dataframe_for_reps vocab
vocab load $vocabulary_file

# Use the localist ("keyed") represenation for the words in the vocab file
words represent (vocab column_rep Word)
# And use the resting levels
words set_resting_level (vocab column_rep Rest) 

# The word layer has a lateral connection
create connection lato
lato autoconnect words words


# ## LETTER LAYER
create iac_layer letters

# We will use the length and letters of the vocabulary to set up the (identical)
#   blocks (slots) of the letter layer, so we need to create a 
#   (blocked - string) representation to process individual characters
#   of the word strings
create string_split orth_str
orth_str set_source (vocab column_rep Word string_representation)
# And create a corresponding localist ("keyed") representation
orth_str create_block_keyed letter_rep
letters represent letter_rep

# There are bidirection connections between this letter layer and the word layer
create connection olc
olc autoconnect words letters
create connection loc
loc autoconnect letters words


# ## FEATURE LAYER
create iac_layer features

# Load the feature representations for each letter
create dataframe_for_reps features_db
features_db load $letter_feature_file

# Create and use a blocked representation (slots) of these feature definitions
create representation feat_rep
feat_rep type blocked_representation
feat_rep set_element (features_db column_rep features)
features represent feat_rep
# No particular number of slots is set

# Hint to the GUI that plot_features.R is relevant
features add_hint_plus port state plot_type plot_features.R


# Mark the letter column in the feature file as being useable as
#   equivalent to the individual characters of the words
create equiv_conversion lettersc
lettersc set_target (features_db column_rep letter string_representation)
lettersc set_source (orth_str inner)

# And mark the upper case in the feature file as equivalent to any lower case in 
#  vocabulary, by adding a fallback to the 
#   ((features_db column_rep letter) find_conversion (orth_str inner))
include Models/lowerupper.eNs
((features_db column_rep letter) find_conversion (orth_str inner)) add_fallback caser

# And it's now possible to connect the feature and letter layers
create connection flc
flc autoconnect features letters
# This automatically expands the feat_rep to have the same slots as the letter_rep

# ## SET UP OUTPUT
# Marks "words" as an output layer, and sets up a simple threshold identification
#   mechanism
create best_above_threshold_observer identifier
identifier target words
ia add identifier


# ## SET UP INPUT
# orthographic inputs should be interpreted as formatted like a Word (as a string)
#   and be used to clamp the feature layer
ia define_input orthographic (vocab column_rep Word string_representation) features
#   the string_representation part allows that the stimulus doesn't need to be a word
#   (cf. the keyed_representation cannot represent nonwords)

# We want to be able to put in a fallback position for characters that are not
#   in this original vocabulary representation, but which we want
#   interpreted in user input, e.g. * = ambiguous R/K, or wrong-case letters

# If we don't do anything, the chain for the inputs will use
#   orth_str --> (orth_str parallel) --> ...
# (orth_str parallel) moves to the localist representation of the letters
# so any unusual characters will get lost.  

# Instead, we need to set up a direct link parallel_conversion from the
#   individual input characters to the feature representation
#
# This will mean that inputs go: 
#   (vocab column_rep Word string_representation)
#       |
#       | orth_str
#       V
#   (orth_str get_target) = n x (orth_str inner)
#       |                        ||
#       | char_by_char           || ((features_db column_rep features) find_conversion (orth_str inner))
#       V                        \/
#   feat_rep              = n x (features_db column_rep features)
#
# ((features_db column_rep features) find_conversion (orth_str inner)) is something
#   we will be able to add a useful fallback for, linking unusual characters 
#   directly to their feature representations.  This is a conversion_chain that uses
#   ((features_db column_rep letter) find_conversion (orth_str inner)), which has
#   the upper-lower fallback, so setting up char_by_char will also enable wrong-case
#   

create parallel_conversion char_by_char
char_by_char set_source (orth_str get_target)
char_by_char set_target feat_rep

include Models/extras.eNs
caser_plus add_fallback extras 
((features_db column_rep features) find_conversion (orth_str inner)) add_fallback caser_plus

# LOAD PARAMETERS

(ia parameters) load $parameter_file
